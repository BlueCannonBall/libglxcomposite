/* automatically generated by rust-bindgen 0.59.2 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor {
    _unused: [u8; 0],
}
pub type Window = ::std::os::raw::c_ulong;
pub type GLXPixmap = ::std::os::raw::c_ulong;
pub const EventType_EVENT_NONE: EventType = 0;
pub const EventType_EVENT_CREATE: EventType = 1;
pub const EventType_EVENT_DESTROY: EventType = 2;
pub const EventType_EVENT_MAP: EventType = 3;
pub const EventType_EVENT_UNMAP: EventType = 4;
pub type EventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event {
    pub type_: EventType,
    pub event: Window,
    pub window: Window,
}
#[test]
fn bindgen_test_layout_Event() {
    assert_eq!(
        ::std::mem::size_of::<Event>(),
        24usize,
        concat!("Size of: ", stringify!(Event))
    );
    assert_eq!(
        ::std::mem::align_of::<Event>(),
        8usize,
        concat!("Alignment of ", stringify!(Event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Event>())).event as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Event),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Event>())).window as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Event),
            "::",
            stringify!(window)
        )
    );
}
extern "C" {
    pub fn create_compositor(display: *const ::std::os::raw::c_char) -> *mut Compositor;
}
extern "C" {
    pub fn init_compositor(compositor: *mut Compositor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn destroy_compositor(compositor: *mut Compositor);
}
extern "C" {
    pub fn free_compositor(compositor: *mut Compositor);
}
extern "C" {
    pub fn init_threads();
}
extern "C" {
    pub fn lock_display(compositor: *mut Compositor);
}
extern "C" {
    pub fn unlock_display(compositor: *mut Compositor);
}
extern "C" {
    pub fn get_root_window(compositor: *mut Compositor) -> Window;
}
extern "C" {
    pub fn get_composite_window(compositor: *mut Compositor) -> Window;
}
extern "C" {
    pub fn get_window_width(compositor: *mut Compositor, window: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_window_height(compositor: *mut Compositor, window: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_window_depth(compositor: *mut Compositor, window: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_window_x(compositor: *mut Compositor, window: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_window_y(compositor: *mut Compositor, window: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_window_visible(compositor: *mut Compositor, window: Window) -> bool;
}
extern "C" {
    pub fn swap_buffers(compositor: *mut Compositor);
}
extern "C" {
    pub fn get_windows_recursive(
        compositor: *mut Compositor,
        parent: Window,
        windows: *mut *mut Window,
        nwindows: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_all_windows(
        compositor: *mut Compositor,
        windows_ret: *mut *mut Window,
        nwindows_ret: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_windows(windows: *mut Window);
}
extern "C" {
    pub fn poll_events(compositor: *mut Compositor) -> Event;
}
extern "C" {
    pub fn create_glx_pixmap(compositor: *mut Compositor, window: Window) -> GLXPixmap;
}
extern "C" {
    pub fn destroy_glx_pixmap(compositor: *mut Compositor, glx_pixmap: GLXPixmap);
}
extern "C" {
    pub fn glx_bind_window_texture(compositor: *mut Compositor, glx_pixmap: GLXPixmap);
}
extern "C" {
    pub fn glx_unbind_window_texture(compositor: *mut Compositor, glx_pixmap: GLXPixmap);
}
